#-- DISCLAIMER OF LIABILITY
#--
#-- This file contains proprietary and confidential information of
#-- Xilinx, Inc. ("Xilinx"), that is distributed under a license
#-- from Xilinx, and may be used, copied and/or disclosed only
#-- pursuant to the terms of a valid license agreement with Xilinx.
#--
#-- XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
#-- ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
#-- EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
#-- LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
#-- MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
#-- does not warrant that functions included in the Materials will
#-- meet the requirements of Licensee, or that the operation of the
#-- Materials will be uninterrupted or error-free, or that defects
#-- in the Materials will be corrected. Furthermore, Xilinx does
#-- not warrant or make any representations regarding use, or the
#-- results of the use, of the Materials in terms of correctness,
#-- accuracy, reliability or otherwise.
#--
#-- Xilinx products are not designed or intended to be fail-safe,
#-- or for use in any application requiring fail-safe performance,
#-- such as life-support or safety devices or systems, Class III
#-- medical devices, nuclear facilities, applications related to
#-- the deployment of airbags, or any other applications that could
#-- lead to death, personal injury or severe property or
#-- environmental damage (individually and collectively, "critical
#-- applications"). Customer assumes the sole risk and liability
#-- of any use of Xilinx products in critical applications,
#-- subject only to applicable laws and regulations governing
#-- limitations on product liability.
#--
#-- Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
#--
#-- This disclaimer and copyright notice must be retained as part
#-- of this file at all times.
#--
###################################################################
##
## Name     : s2imac_epc
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN s2imac_epc

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION USAGE_LEVEL = BASE_USER
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION DESC = S2IMAC External Peripheral Controller
OPTION LONG_DESC = PLBV46 External Peripherals other than Memories
OPTION IP_GROUP = Peripheral Controller:MICROBLAZE:PPC
OPTION ARCH_SUPPORT_MAP = (aspartan3=PREFERRED, spartan3=PREFERRED, spartan3an=PREFERRED, spartan3a=PREFERRED, spartan3e=PREFERRED, spartan3adsp=PREFERRED, virtex4lx=PREFERRED, virtex4sx=PREFERRED, virtex4fx=PREFERRED, virtex5lx=PREFERRED, virtex5sx=PREFERRED, virtex5fx=PREFERRED, aspartan3e=PREFERRED, aspartan3a=PREFERRED, aspartan3adsp=PREFERRED, qvirtex4lx=PREFERRED, qvirtex4sx=PREFERRED, qvirtex4fx=PREFERRED, qrvirtex4lx=PREFERRED, qrvirtex4sx=PREFERRED, qrvirtex4fx=PREFERRED, spartan6t=PREFERRED, spartan6=PREFERRED, spartan6l=EARLY_ACCESS, qspartan6t=PREFERRED, qspartan6=PREFERRED, aspartan6t=PREFERRED, aspartan6=PREFERRED, virtex6lx=PREFERRED, virtex6sx=PREFERRED, virtex6hx=PREFERRED, virtex6cx=PREFERRED, virtex6llx=PREFERRED, virtex6lsx=PREFERRED, qspartan6l=EARLY_ACCESS, qrvirtex5=EARLY_ACCESS, qvirtex6lx=PREFERRED, qvirtex6sx=PREFERRED, qvirtex6fx=PREFERRED, qvirtex6tx=PREFERRED)
OPTION RUN_NGCBUILD = FALSE
OPTION STYLE = HDL
OPTION TCL_FILE = s2imac_epc_v2_1_0.tcl
OPTION TOP = s2imac_epc

IO_INTERFACE IO_IF = epc_0, IO_TYPE = XIL_EPC_V1

## Bus Interfaces
BUS_INTERFACE BUS = SPLB, BUS_TYPE = SLAVE, BUS_STD = PLBV46

## Generics for VHDL or Parameters for Verilog
PARAMETER C_SPLB_CLK_PERIOD_PS = 10000, DT = INTEGER, BUS = SPLB
PARAMETER C_PRH_CLK_PERIOD_PS = 20000, DT = INTEGER
PARAMETER C_FAMILY = virtex5, DT = STRING
PARAMETER C_SPLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_DWIDTH = 32, DT = INTEGER, BUS = SPLB, RANGE = (32,64,128)
PARAMETER C_SPLB_P2P = 0, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB
PARAMETER C_SPLB_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB, RANGE = (1:16)
PARAMETER C_SPLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_INTERRUPT_PRESENT = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_NUM_PERIPHERALS = 1, DT = INTEGER, RANGE = (1:4), IO_IF = epc_0, IO_IS = num_periphs
PARAMETER C_PRH_MAX_AWIDTH = 32, DT = INTEGER, RANGE = (3:32), IO_IF = epc_0, IO_IS = max_awidth
PARAMETER C_PRH_MAX_DWIDTH = 32, DT = INTEGER, RANGE = (8,16,32), IO_IF = epc_0, IO_IS = max_dwidth
PARAMETER C_PRH_MAX_ADWIDTH = 32, DT = INTEGER, RANGE = (8:32), IO_IF = epc_0, IO_IS = max_adwidth
PARAMETER C_PRH_CLK_SUPPORT = 0, DT = INTEGER, ISVALID = (C_PRH0_SYNC==1 || C_PRH1_SYNC==1 || C_PRH2_SYNC==1 || C_PRH3_SYNC==1 ), RANGE = (0,1), IO_IF = epc_0, IO_IS = clk_support
PARAMETER C_PRH_BURST_SUPPORT = 0, DT = INTEGER, ASSIGNMENT = CONSTANT, IO_IF = epc_0, IO_IS = burst_support
PARAMETER C_PRH0_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_PRH0_HIGHADDR, ISVALID = (C_NUM_PERIPHERALS>=1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_PRH0_BASEADDR, ISVALID = (C_NUM_PERIPHERALS>=1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_FIFO_ACCESS = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_PRH0_FIFO_OFFSET = 0, DT = INTEGER, ISVALID = (C_PRH0_FIFO_ACCESS==1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_AWIDTH = 32, DT = INTEGER, RANGE = (3:32), IO_IF = epc_0, IO_IS = prh0_awidth
PARAMETER C_PRH0_DWIDTH = 32, DT = INTEGER, RANGE = (8,16,32), IO_IF = epc_0, IO_IS = prh0_dwidth
PARAMETER C_PRH0_DWIDTH_MATCH = 0, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh0_dwidth_match
PARAMETER C_PRH0_SYNC = 1, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh0_sync
PARAMETER C_PRH0_BUS_MULTIPLEX = 0, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh0_bus_multiplex
PARAMETER C_PRH0_ADDR_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_addr_tsu, ISVALID = (C_NUM_PERIPHERALS>=1 && !(C_PRH0_SYNC==1 && C_PRH0_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_ADDR_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_addr_th, ISVALID = (C_NUM_PERIPHERALS>=1  && !(C_PRH0_SYNC==1 && C_PRH0_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_ADS_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_ads_width, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_BUS_MULTIPLEX==1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_CSN_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_csn_tsu, ISVALID = (C_NUM_PERIPHERALS>=1  && !(C_PRH0_SYNC==1 && C_PRH0_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_CSN_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_csn_th, ISVALID = (C_NUM_PERIPHERALS>=1  && !(C_PRH0_SYNC==1 && C_PRH0_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_WRN_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_wrn_width, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_WR_CYCLE = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_wr_cycle, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_DATA_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_data_tsu, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_DATA_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_data_th, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_RDN_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_rdn_width, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_RD_CYCLE = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_rd_cycle, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_DATA_TOUT = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_data_tout, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_DATA_TINV = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_data_tinv, ISVALID = (C_NUM_PERIPHERALS>=1 && C_PRH0_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_RDY_TOUT = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_rdy_tout, ISVALID = (C_NUM_PERIPHERALS>=1 ), ASSIGNMENT = REQUIRE
PARAMETER C_PRH0_RDY_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh0_rdy_width, ISVALID = (C_NUM_PERIPHERALS>=1 ), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_PRH1_HIGHADDR, ISVALID = (C_NUM_PERIPHERALS>=2), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_PRH1_BASEADDR, ISVALID = (C_NUM_PERIPHERALS>=2), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_FIFO_ACCESS = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PERIPHERALS>=2), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_FIFO_OFFSET = 0, DT = INTEGER, ISVALID = (C_PRH1_FIFO_ACCESS==1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_AWIDTH = 32, DT = INTEGER, RANGE = (3:32), IO_IF = epc_0, IO_IS = prh1_awidth, ISVALID = (C_NUM_PERIPHERALS>=2), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_DWIDTH = 32, DT = INTEGER, RANGE = (8,16,32), IO_IF = epc_0, IO_IS = prh1_dwidth, ISVALID = (C_NUM_PERIPHERALS>=2), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_DWIDTH_MATCH = 0, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh1_dwidth_match, ISVALID = (C_NUM_PERIPHERALS>=2), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_SYNC = 1, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh1_sync, ISVALID = (C_NUM_PERIPHERALS>=2), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_BUS_MULTIPLEX = 0, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh1_bus_multiplex, ISVALID = (C_NUM_PERIPHERALS>=2), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_ADDR_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_addr_tsu, ISVALID = (C_NUM_PERIPHERALS>=2 && !(C_PRH1_SYNC==1 && C_PRH1_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_ADDR_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_addr_th, ISVALID = (C_NUM_PERIPHERALS>=2 && !(C_PRH1_SYNC==1 && C_PRH1_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_ADS_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_ads_width, ISVALID = (C_NUM_PERIPHERALS>=2 && C_PRH1_BUS_MULTIPLEX==1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_CSN_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_csn_tsu, ISVALID = (C_NUM_PERIPHERALS>=2 && !(C_PRH1_SYNC==1 && C_PRH1_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_CSN_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_csn_th, ISVALID = (C_NUM_PERIPHERALS>=2 && !(C_PRH1_SYNC==1 && C_PRH1_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_WRN_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_wrn_width, ISVALID = (C_NUM_PERIPHERALS>=2  && C_PRH1_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_WR_CYCLE = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_wr_cycle, ISVALID = (C_NUM_PERIPHERALS>=2 && C_PRH1_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_DATA_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_data_tsu, ISVALID = (C_NUM_PERIPHERALS>=2 && C_PRH1_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_DATA_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_data_th, ISVALID = (C_NUM_PERIPHERALS>=2 && C_PRH1_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_RDN_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_rdn_width, ISVALID = (C_NUM_PERIPHERALS>=2 && C_PRH1_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_RD_CYCLE = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_rd_cycle, ISVALID = (C_NUM_PERIPHERALS>=2 && C_PRH1_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_DATA_TOUT = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_data_tout, ISVALID = (C_NUM_PERIPHERALS>=2 && C_PRH1_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_DATA_TINV = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_data_tinv, ISVALID = (C_NUM_PERIPHERALS>=2 && C_PRH1_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_RDY_TOUT = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_rdy_tout, ISVALID = (C_NUM_PERIPHERALS>=2 ), ASSIGNMENT = REQUIRE
PARAMETER C_PRH1_RDY_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh1_rdy_width, ISVALID = (C_NUM_PERIPHERALS>=2 ), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_PRH2_HIGHADDR, ISVALID = (C_NUM_PERIPHERALS>=3), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_PRH2_BASEADDR, ISVALID = (C_NUM_PERIPHERALS>=3), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_FIFO_ACCESS = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PERIPHERALS>=3), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_FIFO_OFFSET = 0, DT = INTEGER, ISVALID = (C_PRH2_FIFO_ACCESS==1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_AWIDTH = 32, DT = INTEGER, RANGE = (3:32), IO_IF = epc_0, IO_IS = prh2_awidth, ISVALID = (C_NUM_PERIPHERALS>=3), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_DWIDTH = 32, DT = INTEGER, RANGE = (8,16,32), IO_IF = epc_0, IO_IS = prh2_dwidth, ISVALID = (C_NUM_PERIPHERALS>=3), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_DWIDTH_MATCH = 0, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh2_dwidth_match, ISVALID = (C_NUM_PERIPHERALS>=3), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_SYNC = 1, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh2_sync, ISVALID = (C_NUM_PERIPHERALS>=3), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_BUS_MULTIPLEX = 0, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh2_bus_multiplex, ISVALID = (C_NUM_PERIPHERALS>=3), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_ADDR_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_addr_tsu, ISVALID = (C_NUM_PERIPHERALS>=3 && !(C_PRH2_SYNC==1 && C_PRH2_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_ADDR_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_addr_th, ISVALID = (C_NUM_PERIPHERALS>=3 && !(C_PRH2_SYNC==1 && C_PRH2_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_ADS_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_ads_width, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_BUS_MULTIPLEX==1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_CSN_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_csn_tsu, ISVALID = (C_NUM_PERIPHERALS>=3 && !(C_PRH2_SYNC==1 && C_PRH2_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_CSN_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_csn_th, ISVALID = (C_NUM_PERIPHERALS>=3 && !(C_PRH2_SYNC==1 && C_PRH2_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_WRN_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_wrn_width, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_WR_CYCLE = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_wr_cycle, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_DATA_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_data_tsu, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_DATA_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_data_th, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_RDN_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_rdn_width, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_RD_CYCLE = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_rd_cycle, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_DATA_TOUT = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_data_tout, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_DATA_TINV = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_data_tinv, ISVALID = (C_NUM_PERIPHERALS>=3 && C_PRH2_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_RDY_TOUT = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_rdy_tout, ISVALID = (C_NUM_PERIPHERALS>=3 ), ASSIGNMENT = REQUIRE
PARAMETER C_PRH2_RDY_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh2_rdy_width, ISVALID = (C_NUM_PERIPHERALS>=3 ), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_PRH3_HIGHADDR, ISVALID = (C_NUM_PERIPHERALS>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_PRH3_BASEADDR, ISVALID = (C_NUM_PERIPHERALS>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_FIFO_ACCESS = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PERIPHERALS>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_FIFO_OFFSET = 0, DT = INTEGER, ISVALID = (C_PRH3_FIFO_ACCESS==1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_AWIDTH = 32, DT = INTEGER, RANGE = (3:32), IO_IF = epc_0, IO_IS = prh3_awidth, ISVALID = (C_NUM_PERIPHERALS>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_DWIDTH = 32, DT = INTEGER, RANGE = (8,16,32), IO_IF = epc_0, IO_IS = prh3_dwidth, ISVALID = (C_NUM_PERIPHERALS>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_DWIDTH_MATCH = 0, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh3_dwidth_match, ISVALID = (C_NUM_PERIPHERALS>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_SYNC = 1, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh3_sync, ISVALID = (C_NUM_PERIPHERALS>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_BUS_MULTIPLEX = 0, DT = INTEGER, RANGE = (0,1), IO_IF = epc_0, IO_IS = prh3_bus_multiplex, ISVALID = (C_NUM_PERIPHERALS>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_ADDR_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_addr_tsu, ISVALID = (C_NUM_PERIPHERALS>=4 && !(C_PRH3_SYNC==1 && C_PRH3_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_ADDR_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_addr_th, ISVALID = (C_NUM_PERIPHERALS>=4 && !(C_PRH3_SYNC==1 && C_PRH3_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_ADS_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_ads_width, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_BUS_MULTIPLEX==1), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_CSN_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_csn_tsu, ISVALID = (C_NUM_PERIPHERALS>=4 && !(C_PRH3_SYNC==1 && C_PRH3_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_CSN_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_csn_th, ISVALID = (C_NUM_PERIPHERALS>=4 && !(C_PRH3_SYNC==1 && C_PRH3_BUS_MULTIPLEX==0)), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_WRN_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_wrn_width, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_WR_CYCLE = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_wr_cycle, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_DATA_TSU = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_data_tsu, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_DATA_TH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_data_th, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_RDN_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_rdn_width, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_RD_CYCLE = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_rd_cycle, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_DATA_TOUT = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_data_tout, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_DATA_TINV = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_data_tinv, ISVALID = (C_NUM_PERIPHERALS>=4 && C_PRH3_SYNC==0), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_RDY_TOUT = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_rdy_tout, ISVALID = (C_NUM_PERIPHERALS>=4 ), ASSIGNMENT = REQUIRE
PARAMETER C_PRH3_RDY_WIDTH = 0, DT = INTEGER, IO_IF = epc_0, IO_IS = prh3_rdy_width, ISVALID = (C_NUM_PERIPHERALS>=4 ), ASSIGNMENT = REQUIRE

## Ports
PORT SPLB_Clk = "", DIR = I, SIGIS = Clk, BUS = SPLB
PORT SPLB_Rst = SPLB_Rst, DIR = I, SIGIS = Rst, BUS = SPLB
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:(C_SPLB_AWIDTH-1)], BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_SPLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT PLB_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB
PORT PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB
PORT PLB_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT PRH_Clk = "", DIR = I, SIGIS = Clk
PORT PRH_Rst = "", DIR = I, SIGIS = Rst
PORT PRH_CS_n = "", DIR = O, VEC = [0:(C_NUM_PERIPHERALS-1)], IO_IF = epc_0, IO_IS = chip_enable
PORT PRH_Addr = "", DIR = O, VEC = [0:(C_PRH_MAX_AWIDTH-1)], IO_IF = epc_0, IO_IS = address
PORT PRH_ADS = "", DIR = O, IO_IF = epc_0, IO_IS = address_strobe
PORT PRH_BE = "", DIR = O, VEC = [0:((C_PRH_MAX_DWIDTH/8)-1)], IO_IF = epc_0, IO_IS = byte_enables
PORT PRH_RNW = "", DIR = O, IO_IF = epc_0, IO_IS = read_not_write
PORT PRH_Rd_n = "", DIR = O, IO_IF = epc_0, IO_IS = read_enable
PORT PRH_Wr_n = "", DIR = O, IO_IF = epc_0, IO_IS = write_enable
PORT PRH_Burst = "", DIR = O, IO_IF = epc_0, IO_IS = sync_burst
PORT PRH_Rdy = "", DIR = I, VEC = [0:(C_NUM_PERIPHERALS-1)], IO_IF = epc_0, IO_IS = epc_ready
PORT PRH_Data_I = "", DIR = I, VEC = [0:(C_PRH_MAX_ADWIDTH-1)], IO_IF = epc_0, IO_IS = data_I
PORT PRH_Data_O = "", DIR = O, VEC = [0:(C_PRH_MAX_ADWIDTH-1)], IO_IF = epc_0, IO_IS = data_O
PORT PRH_Data_T = "", DIR = O, VEC = [0:(C_PRH_MAX_ADWIDTH-1)], IO_IF = epc_0, IO_IS = data_T
PORT PRH_Data = "", DIR = IO, VEC = [0:(C_PRH_MAX_ADWIDTH-1)], THREE_STATE = TRUE, TRI_I = PRH_Data_I, TRI_O = PRH_Data_O, TRI_T = PRH_Data_T, ENABLE = MULTI, IO_IF = epc_0, IO_IS = data

PORT PRH_Int = "", DIR = I, ISVALID = (C_INTERRUPT_PRESENT == 1)
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = MEDIUM, ISVALID = (C_INTERRUPT_PRESENT == 1), DESC = "Active high level sensitive interrupt signal to INTC"

END
